# Note we have a maximum of 16 CPUs available, so adjust our
# builds so we can start all concurrently without needing to schedule.

# Sadly though there is still a finite limit to macOS of one instance.
# Can we cull our Mac test to just one instance?

timeout_in: 10m

#--------------------------------------------------
# Template: htslib clone & build
#
# We try to clone htslib using the same branch name and owner as this
# samtools branch.  If it exists, it's likely the user is making a
# joint samtools+htslib PR and wants both checked in unison.
# Failing that we use samtools/htslib:develop.
# Note this only works on the users own forks.  Once in the samtools
# organisation the branch name becomes pull/<num>.

# Logic for choosing which to use is in the .ci_helpers/clone script.
# Note we could also use "clone_script" if we want to replace the samtools
# clone with our own commands too.
clone_template: &HTSLIB_CLONE
  htslib_clone_script: |
    # Tricky, but when run as a PR Cirrus-CI obscures the branch name and
    # replaces it by pull/<num>.  This means we can't automatically get PRs
    # to test whether the user has a similarly named branch to compiler and
    # test against.
    #
    # Instead if we add htslib#NUM into the first line of the commit then
    # we will use that PR from htslib instead.  This is only needed when
    # making a PR, so for development prior to the PR being made the
    # CIRRUS_BRANCH will be used in preference.
    .ci_helpers/clone ${CIRRUS_REPO_OWNER} htslib "${HTSDIR}" "${CIRRUS_BRANCH}" `printenv CIRRUS_CHANGE_TITLE | sed -n 's/.*htslib#\([0-9]*\).*/\1/p'`

htslib_compile_template: &HTSLIB_COMPILE
  << : *HTSLIB_CLONE
  htslib_compile_script: |
    cd $HTSDIR
    autoreconf -i
    if test "x$WERROR" != "xno"; then CONFIG_OPTS="--enable-werror"; fi
    eval ./configure $CONFIG_OPTS --prefix=`pwd`/../inst \
        CFLAGS=\"$CFLAGS\" CPPFLAGS=\"$CPPFLAGS\" LDFLAGS=\"$LDFLAGS\" \
        || (cat config.log; /bin/false)
    make -j3 install

#--------------------------------------------------
# Template: samtools compile and test

compile_template: &COMPILE
  << : *HTSLIB_COMPILE

  compile_script: |
    autoreconf -i
    if test "x$WERROR" != "xno"; then CONFIG_OPTS="--enable-werror"; fi
    eval ./configure $CONFIG_OPTS --with-htslib=`pwd`/inst  \
        LDFLAGS=\"$LDFLAGS -Wl,-rpath,`pwd`/inst/lib\" \
        CFLAGS=\"$CFLAGS\" CPPFLAGS=\"$CPPFLAGS\" || \
        (cat config.log; /bin/false)
    make -j3

test_template: &TEST
  test_script: |
    if test "x$DO_MAINTAINER_CHECKS" = "xyes" ; then
        make maintainer-check
    fi
    make
    make test BGZIP=inst/bin/bgzip


#--------------------------------------------------
# Task: linux builds.

# Debian + latest GCC
gcc_task:
  name: debian-gcc
  container:
    image: gcc:latest
    cpu: 2
    memory: 1G

  environment:
    LC_ALL: C
    CIRRUS_CLONE_DEPTH: 1
    HTSDIR: ./hidden-htslib
    DO_MAINTAINER_CHECKS: yes
    # gcc ubsan is incompatible with some -Wformat options, but they're checked
    # in other tests.  See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87884
    CFLAGS: -g -Og -std=c99 -D_XOPEN_SOURCE=600 -pedantic -fsanitize=address,undefined -Wno-format-truncation -Wno-format-overflow
    CPPFLAGS: -DHTS_ALLOW_UNALIGNED=0
    LDFLAGS: -fsanitize=address,undefined
    UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1

  << : *COMPILE
  << : *TEST


# Ubuntu + Clang
ubuntu_task:
  name: ubuntu-clang
  container:
    image: ubuntu:latest
    #image: ubuntu:devel
    cpu: 2
    memory: 1G

  environment:
    CC: clang
    LC_ALL: C
    CIRRUS_CLONE_DEPTH: 1
    HTSDIR: ./hidden-htslib

  matrix:
    - environment:
       CFLAGS: -std=gnu99 -O0
    - environment:
       CFLAGS: -g -Wall -Wformat -Wformat=2 -O3
       LDFLAGS: -Wl,-rpath,`pwd`/inst/lib

  # NB: we could consider building a docker image with these
  # preinstalled and specifying that instead, to speed up testing.
  install_script: |
    apt-get update
    apt-get install -y --no-install-suggests --no-install-recommends \
        ca-certificates clang git autoconf automake make zlib1g-dev  \
        libbz2-dev liblzma-dev libcurl4-gnutls-dev libssl-dev        \
        libdeflate-dev libncurses5-dev

  << : *COMPILE
  << : *TEST


# Rocky Linux
rocky_task:
  name: rockylinux-gcc
  container:
    image: rockylinux:9
    cpu: 2
    memory: 1G

  environment:
    LC_ALL: C
    CIRRUS_CLONE_DEPTH: 1
    HTSDIR: ./hidden-htslib
    CFLAGS: -O2 -Wextra -Wformat -Wformat=2 -Wno-sign-compare -Wno-missing-field-initializers -Wno-unused-parameter

  # NB: we could consider building a docker image with these
  # preinstalled and specifying that instead, to speed up testing.
  install_script: |
    yum install -y autoconf automake make gcc perl-Data-Dumper perl-FindBin \
        zlib-devel bzip2 bzip2-devel xz-devel curl-devel openssl-devel \
        ncurses-devel git diffutils

  << : *COMPILE
  << : *TEST


#--------------------------------------------------
# Task: macOS builds

macosx_task:
  name: macosx + clang
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest

  environment:
    CC: clang
    LC_ALL: C
    CIRRUS_CLONE_DEPTH: 1
    HTSDIR: ./hidden-htslib
    CFLAGS: -g -Wall -O2

  package_install_script:
    - HOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool xz

  << : *COMPILE
  << : *TEST


# #--------------------------------------------------
# # Task: FreeBSD builds
# 
# # Slow to launch?  Commented out for now.
# freebsd_task:
#   name: freebsd + gcc
# 
#   freebsd_instance:
#     image_family: freebsd-12-1
#     cpu: 1
#     memory: 1G
# #
# #  install_script: |
# #    pkg install -y ... to be determined
# 
#   << : *COMPILE
#   << : *TEST
