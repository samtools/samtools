System Requirements
===================

Samtools and HTSlib depend on the following libraries:

  Samtools:
    zlib       <http://zlib.net>
    curses or GNU ncurses (optional, for the 'tview' command)
               <http://www.gnu.org/software/ncurses/>

  HTSlib:
    zlib       <http://zlib.net>
    libbz2     <http://bzip.org/>
    liblzma    <http://tukaani.org/xz/>
    libcurl    <https://curl.haxx.se/>
               (optional but strongly recommended, for network access)
    libcrypto  <https://www.openssl.org/>
               (optional, for Amazon S3 support; not needed on MacOS)

See the "System Specific Details" below for guidance on how to install
these.

The bzip2 and liblzma dependencies can be removed if full CRAM support
is not needed - see HTSlib's INSTALL file for details.

The following programs are required:

    GNU make
    C compiler (e.g. gcc or clang)

In addition, building the configure script requires:

    autoheader
    autoconf

Running the configure script uses awk, along with a number of
standard UNIX tools (cat, cp, grep, mv, rm, sed, among others).  Almost
all installations will have these already.  

Running the test harness (make test) uses:

    bash
    perl

If you are unsure about this, be sure to use './configure' to determine
whether you have these libraries and to help diagnose which packages may
need to be installed on your build machine to provide them.

Building Configure
==================

This step is only needed if configure.ac has been changed, or if configure
does not exist (for example, when building from a git clone).  The
configure script and config.h.in can be built by running:

    autoheader
    autoconf -Wno-syntax

If you have a full GNU autotools install, you can alternatively run:

    autoreconf

When running these tools, you may see warnings about AC_CONFIG_SUBDIRS.
These are expected, and should be ignored.

Basic Installation
==================

To build and install Samtools, 'cd' to the samtools-1.x directory containing
the package's source and type the following commands:

    ./configure
    make
    make install

The './configure' command checks your build environment and allows various
optional functionality to be enabled (see Configuration below).  If you
don't want to select any optional functionality, you may wish to omit
configure and just type 'make; make install' as for previous versions
of samtools.  However if the build fails you should run './configure'
as it can diagnose the common reasons for build failures.

The 'make' command builds samtools and various miscellaneous utilities.
If compilation fails you should run './configure' as it can diagnose
problems with your build environment that cause build failures.

(The bgzip, htsfile, and tabix utilities are provided by HTSlib.  If you are
not also compiling HTSlib separately, you may wish to compile these utilities
in the associated copy of HTSlib.  Type 'make all all-htslib' to do this.)

The 'make install' command installs the samtools executable and various
scripts and executables from misc/ and a manual page to /usr/local.
The installation location can be changed by configuring with --prefix=DIR
or via 'make prefix=DIR install' (see Installation Locations below).

(If you have not also installed HTSlib separately, you may wish to install
the bgzip, htsfile, and tabix utilities from the associated copy of HTSlib.
Type 'make install install-htslib' to do this.)

Typically you will want to enable HTSlib's HTTPS/etc plugin etc.
See README for recipes for typical installation.


Configuration
=============

By default, './configure' examines your build environment, searching for a
usable HTSlib and checking for requirements such as the curses development
files, and arranges for a plain samtools build.

This samtools release contains a copy of the HTSlib source code which will
be used to build samtools.  If you already have a system-installed HTSlib
or another HTSlib that you would prefer to build against, you can arrange
this via the --with-htslib option.

The following configure options can be used to enable various features and
specify further optional external requirements:

--with-htslib=DIR
    Specifies the HTSlib source tree or installation directory that samtools
    should use to parse bioinformatics file formats etc.  Configure will check
    that DIR appears to contain HTSlib source files or to be the root of an
    installation directory (i.e., it has 'include' and 'lib' subdirectories
    containing HTSlib headers and libraries).

    (If the desired HTSlib source tree has been configured to build in a
    separate build directory, DIR should refer to the build directory.)

    By default, configure looks for an HTSlib source tree within or alongside
    the samtools source directory; if there are several likely candidates,
    you will have to choose one via this option.

--with-htslib=system
    Ignores any nearby HTSlib source trees, and builds samtools using an
    existing HTSlib installation in a system directory (i.e., a directory
    already being searched by $CPPFLAGS/$LDFLAGS).

--without-curses
    Omit the curses-based 'tview' subcommand from the build.  If you do not
    have curses on your build machine or otherwise don't want the interactive
    tview subcommand, this option disables it and skips testing for working
    curses development files.

--enable-configure-htslib
    When building with an HTSlib source tree, run HTSlib's configure script
    as well.  HTSlib configure options can also be used and will be
    passed down to the HTSlib configure.  See HTSlib's INSTALL documentation
    for details of these options.

If you are building with HTSlib source in a subdirectory of the samtools
tree,  --enable-configure-htslib is turned on by default and the HTSlib
configure script will be run automatically.  This is the case for the
samtools release tar archives which include an embedded copy of HTSlib.

The configure script also accepts the usual options and environment variables
for tuning installation locations and compilers: type './configure --help'
for details.  For example,

    ./configure CC=icc --prefix=/opt/icc-compiled

would specify that samtools is to be built with icc and installed into bin,
lib, etc subdirectories under /opt/icc-compiled.

If dependencies have been installed in non-standard locations (i.e. not on
the normal include and library search paths) then the CPPFLAGS and LDFLAGS
environment variables can be used to set the options needed to find them.
For example, NetBSD users may use:

    ./configure CPPFLAGS=-I/usr/pkg/include \
                LDFLAGS='-L/usr/pkg/lib -Wl,-R/usr/pkg/lib'

to allow compiling and linking against dependencies installed via the ports
collection.

Installation Locations
======================

By default, 'make install' installs samtools and the utilities under
/usr/local/bin and manual pages under /usr/local/share/man.

You can specify a different location to install Samtools by configuring
with --prefix=DIR or specify locations for particular parts of HTSlib by
configuring with --bindir=DIR and so on.  Type './configure --help' for
the full list of such install directory options.

Alternatively you can specify different locations at install time by
typing 'make prefix=DIR install' or 'make bindir=DIR install' and so on.
Consult the list of prefix/exec_prefix/etc variables near the top of the
Makefile for the full list of such variables that can be overridden.

You can also specify a staging area by typing 'make DESTDIR=DIR install',
possibly in conjunction with other --prefix or prefix=DIR settings.
For example,

    make DESTDIR=/tmp/staging prefix=/opt

would install into bin and share/man subdirectories under /tmp/staging/opt.


System Specific Details
=======================

Installing the prerequisites is system dependent and there is more
than one correct way of satisfying these, including downloading them
from source, compiling and installing them yourself.

For people with super-user access, we provide an example set of commands
below for installing the dependencies on a variety of operating system
distributions.  Note these are not specific recommendations on distribution,
compiler or SSL implementation.  It is assumed you already have the core set
of packages for the given distribution - the lists may be incomplete if
this is not the case.

Debian / Ubuntu
---------------

sudo apt-get update  # Ensure the package list is up to date
sudo apt-get install autoconf automake make gcc perl zlib1g-dev libbz2-dev liblzma-dev libcurl4-gnutls-dev libssl-dev libncurses5-dev

Note: libcurl4-openssl-dev can be used as an alternative to libcurl4-gnutls-dev.

RedHat / CentOS
---------------

sudo yum install autoconf automake make gcc perl-Data-Dumper zlib-devel bzip2 bzip2-devel xz-devel curl-devel openssl-devel ncurses-devel

Note: On some versions, Perl FindBin will need to be installed to make the tests work.

sudo yum install perl-FindBin

Alpine Linux
------------

doas apk update  # Ensure the package list is up to date
doas apk add autoconf automake make gcc musl-dev perl bash zlib-dev bzip2-dev xz-dev curl-dev libressl-dev ncurses-dev

OpenSUSE
--------

sudo zypper install autoconf automake make gcc perl zlib-devel libbz2-devel xz-devel libcurl-devel libopenssl-devel ncurses-devel

Windows MSYS2/MINGW64
---------------------

The configure script must be used as without it the compilation will
likely fail.

Follow MSYS2 installation instructions at
https://www.msys2.org/wiki/MSYS2-installation/

Then relaunch to MSYS2 shell using the "MSYS2 MinGW x64" executable.
Once in that environment (check $MSYSTEM equals "MINGW64") install the
compilers using pacman -S and the following package list:

base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-libdeflate
mingw-w64-x86_64-zlib mingw-w64-x86_64-bzip2 mingw-w64-x86_64-xz
mingw-w64-x86_64-curl mingw-w64-x86_64-autotools
mingw-w64-x86_64-ncurses mingw-w64-x86_64-tools-git

(The last is only needed for building libraries compatible with MSVC.)
